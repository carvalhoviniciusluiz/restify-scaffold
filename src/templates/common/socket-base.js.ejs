import Joi from 'joi'
import SocketIO from 'socket.io'
import { EventEmitter } from 'events'

export abstract class SocketBase extends EventEmitter {
  abstract applySockets (io: SocketIO.Server): any

  /**
   * Function that will control the sending of data.
   * @param {string} data{any}  Object for validation.
   * @returns
   */
  emitSocket = (data: any, fn: Function, socket: SocketIO.Socket) => {
    const schema = {
      socketID: Joi.string().required(),
      data: Joi.any()
    }
    Joi.validate(data, schema)
      .then(async (result) => {
        try {
          const res = await fn(result.data || {})
          if (res) {
            return socket.emit(result.socketID, { data: res })
          }
          socket.emit(result.socketID, { data: 200 })
        } catch (error) {
          socket.emit(result.socketID, { error })
        }
      })
      .catch(error => {
        throw error
      })
  }
}
