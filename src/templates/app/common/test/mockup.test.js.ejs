import 'jest'
import request from 'supertest'
import faker from 'faker'

const address: string = (<any>global).address

describe('sockets', () => {
  let sender: any

  beforeEach((done) => {
    sender = require('socket.io-client')('http://localhost:3001/', {
      transports: ['websocket'],
      forceNew: true,
      reconnection: false
    })
    done()
  })

  afterEach((done) => {
    sender.disconnect()
    done()
  })

  it('socket request', (done) => {
    sender.emit('SOCKET_TEST', { number: 'abc' })
    sender.on('abc', (data: any) => {
      expect(data).toEqual({ data: 200 })
      done()
    })
  })
})

test('get /mockups', async () => {
  try {
    const res = await request(address)
      .get('/mockups')
    expect(res.status).toBe(200)
    expect(res.body.data).toBeInstanceOf(Array)
  } catch (fail) {
    return fail(fail)
  }
})

test('get /mockups/aaaaa - not found', async () => {
  try {
    const res = await request(address)
      .get('/mockups/aaaaa')
    expect(res.status).toBe(404)
  } catch (fail) {
    return fail(fail)
  }
})

test('get /mockups/:id', async () => {
  try {
    const email = faker.internet.email()
    const res_1 = await request(address)
      .post('/mockups')
      .send({
        email,
        password: faker.internet.password()
      })
    const res_2 = await request(address).get(`/mockups/${res_1.body._id}`)
    expect(res_2.status).toBe(200)
    expect(res_2.body.email).toBe(email)
    expect(res_2.body.password).toBeUndefined()
  } catch (fail) {
    return fail(fail)
  }
})

test('post /mockups - email fake', async () => {
  try {
    const res = await request(address)
      .post('/mockups')
      .send({
        email: 'email',
        password: faker.internet.password()
      })
    expect(res.status).toBe(400)
  } catch (fail) {
    return fail(fail)
  }
})

test('post /mockups', async () => {
  const email = faker.internet.email()
  try {
    const res = await request(address)
      .post('/mockups')
      .send({
        email,
        password: faker.internet.password()
      })
    expect(res.status).toBe(200)
    expect(res.body._id).toBeDefined()
    expect(res.body.email).toBe(email)
    expect(res.body.password).toBeUndefined()
  } catch (fail) {
    return fail(fail)
  }
})

test('post /mockups - email duplicado', async () => {
  const email = faker.internet.email()
  try {
    await request(address)
      .post('/mockups')
      .send({
        email,
        password: faker.internet.password()
      })
    const rest = await request(address)
      .post('/mockups')
      .send({
        email,
        password: faker.internet.password()
      })
    expect(rest.status).toBe(400)
    expect(rest.body.message).toContain('E11000 duplicate key')
  } catch (fail) {
    return fail(fail)
  }
})

test('patch /mockups/aaaaa - not found', async () => {
  try {
    const rest = await request(address)
      .patch(`/mockups/aaaaa`)
    expect(rest.status).toBe(404)
  } catch (fail) {
    return fail(fail)
  }
})

test('patch /mockups/:id', async () => {
  const email = faker.internet.email()
  try {
    const rest = await request(address)
      .post('/mockups')
      .send({
        email: faker.internet.email(),
        password: faker.internet.password()
      })
    const rest_1 = await request(address)
      .patch(`/mockups/${rest.body._id}`)
      .send({
        email
      })
    expect(rest_1.status).toBe(200)
    expect(rest_1.body._id).toBeDefined()
    expect(rest_1.body.email).toBe(email)
    expect(rest_1.body.password).toBeUndefined()
  }
  catch (fail) {
    return fail(fail)
  }
})

test('put /mockups/aaaaa - not found', async () => {
  try {
    const res = await request(address)
      .put(`/mockups/aaaaa`)
    expect(res.status).toBe(404)
  } catch (fail) {
    return fail(fail)
  }
})

test('put /mockups:/id', async () => {
  const email = faker.internet.email()
  try {
    const res = await request(address)
      .post('/mockups')
      .send({
        email: faker.internet.email(),
        password: faker.internet.password()
      })
    const res_1 = await request(address)
      .put(`/mockups/${res.body._id}`)
      .send({
        email,
        password: faker.internet.password()
      })
    expect(res_1.status).toBe(200)
    expect(res_1.body.email).toBe(email)
    expect(res_1.body.password).toBeUndefined()
  } catch (fail) {
    return fail(fail)
  }
})

test('delete /mockups/aaaaa - not found', async () => {
  try {
    const rest = await request(address)
      .delete(`/mockups/aaaaa`)
    expect(rest.status).toBe(404)
  } catch (fail) {
    return fail(fail)
  }
})

test('delete /mockups:/id', async () => {
  try {
    const rest = await request(address)
      .post('/mockups')
      .send({
        email: faker.internet.email(),
        password: faker.internet.password()
      })
    const rest_1 = await request(address).delete(`/mockups/${rest.body._id}`)
    expect(rest_1.status).toBe(204)
  } catch (fail) {
    return fail(fail)
  }
})
